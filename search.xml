<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python工具包之matplotlib的使用--pyplot画图]]></title>
    <url>%2F2018%2F07%2F15%2Fpython%E5%B7%A5%E5%85%B7%E5%8C%85%E4%B9%8Bmatplotlib%E7%9A%84%E4%BD%BF%E7%94%A8-pyplot%E7%94%BB%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp; Matplotlib 是一个 Python 的 2D绘图库, 使用matplotlib能够非常简单的可视化数据。在matplotlib中使用最多的模块就是pyplot。pyplot非常接近Matlab的绘图实现，而且大多数的命令及其类似Matlab。在使用Matplotlib的时候需要import这个模块：1import matplotlib.pyplot as plot &emsp;&emsp;由于matplotlib默认字体没有中文，如果想让画图的标题支持中文的显示，必须手动添加中文字体方可，以下导入SimHei字体： 12from pylab import mplmpl.rcParams[&apos;font.sans-serif&apos;] = [&apos;SimHei&apos;] &emsp;&emsp;画图的时候还会依赖数组和矩阵等科学计算，所以会对numpy产生依赖；所以还需要import numpy；下面将以线图、柱状图、饼图、极坐标图和散点图等几种典型的图表，介绍pyplot这个模块的画图功能。 1. 单个图表的线图&emsp;&emsp;画单个线图和MATLAB，其实基本是一样的，首先选择一个X轴的范围，然后在这个范围内把[x,y]在对应的坐标区间画出来。完整的代码如下：123456789101112131415## 字体的默认设置没有中文，所以需要手动添加中文字体才能显示中文from pylab import mplmpl.rcParams[&apos;font.sans-serif&apos;] = [&apos;SimHei&apos;]import numpy as npimport matplotlib.pyplot as plot##画单个图，多根线def plotSignleImg(): x=np.arange(0,5,0.2) # X轴的范围，0-5，点的间距是0.2个单位 plot.plot(x,x**4,&apos;r&apos;,x,x*90,&apos;bs&apos;,x,x**3,&apos;g^&apos;) ## &apos;r&apos;红 &apos;bs&apos;蓝 &apos;g^&apos;绿 plot.show() # 显示画图结果 if __name__==&apos;__main__&apos;: plotSignleImg() &emsp;&emsp;效果图： 2. 多个图表在一个图&emsp;&emsp;在一个图表中画多个图，合画单个图的方式基本是一致的，唯一的区别就是，画多图的时候需要把画布分割成相应的块数，来放图表。如下例子，画两个图，需要命令plot.subplot(211)和plot.subplot(212)这两行代码中的数字前边两个必须一直，最后一个数代表图的位置，这里1表示上边的位置，2表示下边的例子。 12345678910111213## 画多个图，多根线def plotMultiImg(): x1=np.arange(0,5,0.05) x2=np.arange(0,5,0.05) plot.figure(1) #启一个画布，用来承载图表的渲染，可忽略，默认会加载 plot.subplot(211) #211 2：水平方向2个图，1：垂直方向1列，1：第1个位置 plot.plot(x1,x1**4,&apos;r&apos;,x1,x1*90,&apos;bs&apos;,x1,x1**3,&apos;g^&apos;,linewidth=2.0) plot.subplot(212) # 212 2：水平方向2个图，1：垂直方向1列，1：第2个位置 plot.plot(x2,np.cos(2*np.pi*x2),&apos;k&apos;) plot.show() &emsp;&emsp;效果图： 3. 画直方图 (柱状图)&emsp;&emsp;正太分布是，平常大家接触最多的一种数据的呈现规则；这里以正态分布为例，介绍一下怎么画一个正太分布图的直方图；首先构造一组满足正态分布的数据，取分布在[0,1]随机的1000组数据，构造正态分布数据。x=mu+sigma*np.random.randn(1000)从标准正态分布中返回n=1000个样本值，这1000个数值的大小随机在[0,1]。 123456789101112131415def plotHitImg(): mu,sigma=100,15 x=mu+sigma*np.random.randn(1000) #从标准正态分布中返回n=1000个样本值。 bins=100 plot.hist(x,bins,normed=1,histtype=&apos;stepfilled&apos;,facecolor=&apos;b&apos;,alpha=0.75) n,bins,patches=plot.hist(x,100,normed=1,facecolor=&apos;k&apos;) #k 表示黑色 b blue g green r red c cyan m magenta y yellow w white plot.xlabel(&quot;频率&quot;) plot.ylabel(&quot;概率&quot;) plot.title(&quot;直方图示例&quot;) plot.text(40,0.028,&apos;均值=100 标准差=15&apos;) plot.axis([40,160,0,0.03]) plot.grid() plot.show() 这里plot.hist()函数中， bins将直方图的取值范围进行均等划分bings个区间； normed =1 表示将出现频次进行了归一化。 normed=0，则为频次； alpha表示直方图的透明度[0, 1] ； histtype = ‘stepfilled’ 表示去除条柱的黑色边框 , hist柱子类型 rwidth= :柱子与柱子之间的距离，默认是0 orientation:水平或垂直方向 plot.text()函数中， text(x,y,string,fontsize=15,verticalalignment=”top”,horizontalalignment=”right”) x,y:表示坐标值上的值 也就是字符串在图标的位置； string:表示说明文字 fontsize:表示字体大小 verticalalignment:垂直对齐方式，参数:[center|top|bottom|baseline] horizontalalignment:水平对齐方式，参数:[center|right|left] &emsp;&emsp;效果图： 4. 画饼图123456789def plotPieImg(): labels=[&apos;苹果&apos;,&apos;西瓜&apos;,&apos;芒果&apos;,&apos;猕猴桃&apos;] size=[50,12,18,20] explode=(0,0.0,0,0) plot.pie(size,explode=explode,labels=labels,autopct=&apos;%1.1f%%&apos;,shadow=True,startangle=90,pctdistance = 0.6) plot.axis(&apos;equal&apos;) plot.legend() #画出标签的图 plot.show() &emsp;&emsp;效果图： 5. 极坐标图1234567891011121314151617#面向对象的极坐标图绘制def plotPolorImg(): N=20 theta=np.linspace(0.0,2*np.pi,N,endpoint=False) radii=10*np.random.rand(N) width=np.pi/4*np.random.rand(N) ax=plot.subplot(111,projection=&apos;polar&apos;) #建立一个坐标系，projection=&apos;polar&apos;表示极坐标 bars=ax.bar(theta,radii,width,bottom=0.0) #theta,radii,width分别是left，height， width #ax.bar(left=x,height=y,width=w,bottom=10,color=color,edgecolor=color) # 一个柱状图由left，bottom，height，width四个参数决定位置和大小left决定了左边界，bottom决定了下边界，height决定了长度，width决定了宽度. # 对应到笛卡尔坐标系中，left决定了扇形的中线位置，然后height决定扇形的长度，bottom决定了下边界，width决定了扇形的宽度。 for r,bar in zip(radii,bars): bar.set_facecolor(plot.cm.viridis(r/10.)) bar.set_alpha(0.5) plot.show() &emsp;&emsp;效果图： 6. 散点图1234567#散点图def plotScatterImg(): #返回值 fig : matplotlib.figure.Figure object ax : Axes object or array of Axes objects. fig,ax=plot.subplots() ax.plot(10*np.random.rand(10),10*np.random.rand(10),&apos;o&apos;) ax.set_title(&apos;简单散点图&apos;) plot.show() &emsp;&emsp;效果图： 学习文献：[1] 官方教程 : https://matplotlib.org/users/pyplot_tutorial.html]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>matplotlib</tag>
        <tag>plot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows搭建git环境]]></title>
    <url>%2F2018%2F07%2F14%2Fwindows%E6%90%AD%E5%BB%BAgit%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。与常用的版本控制工具 CVS, Subversion等不同，它采用了分布式版本库的方式，不必服务器端软件支持. 1. git安装&emsp;&emsp;下载git windows一路安装下来. 2. 注册github账户&emsp;&emsp;访问github官网，注册一个github账户. 3. git bash添加本地仓&emsp;&emsp;通过 git bash 客户端添加添加一个本地文件夹作为本地仓库；可以通过 pwd 命令来查看当前bash窗口的路径。&emsp;&emsp;此处静载本地f盘创建了一个git的空文夹名为:git，用来作为本地的仓库。然后，cd到git文件夹下，用git init命令初始化这个文件夹。&emsp;&emsp;初始化之后，再调用 git config --global config 本地仓库关联到远端的 github 账户，也就是你注册 github 的时候填的用户名和邮箱。&emsp;&emsp;到这里，其实已经基本建好了本地仓库和远程github仓库的连接。但是每次使用的时候都让你输入用户名和密码，很是麻烦。怎么解决呢？添加 ssh key， 可以根据官网的 git help 创建ssh秘钥。这里首先调用 $ ssh-keygen -t rsa -C &quot;liuru@host.com&quot; 调用创建秘钥的指令。&emsp;&emsp;如上图所示，使用默然的方式生成，并没有进行设置，密码根据自己的喜好设置。然后一直enter到末尾，有了这个秘钥之后，我们还需要做两件事情：1、把这个密码和github账户关联起来；2、把它和本地客户端关联起来。 关联的到github账户: 在github账户的setting地方有一个ssh key的你添加输入，生成的秘钥内容（id_rsa.pub文件中保存），到相应的地方即可; 关联本地客户端: 根据上述创建的过程中的提示，我们找到相应的.ssh/id_rsa.pub找到文件。首先确保ssh客户端能用，调用 evel &quot;$(ssh-agent -s)&quot; 命令查看, 有 agent id 即为有用； 然后, 调用 ssh-add ~/.ssh/id_rsa 把秘钥添加到ssh客户端，这样整个过程就创建完成，就可以享受git带来的便利了。4. 从github仓库clone内容&emsp;&emsp;在本地创建了一个与github的账号同名的文件夹，比如我的github上有一个仓库叫C-Cplus-plus的仓库，然后调用 $ git clone git@github.com:ruitear/C-C-plus-plus.git (其中ruitear是账户名)5. 在仓库里面创建子文件夹&emsp;&emsp;陆github账户在网页上只能以单个文件的形式进行upload，然而并不符合我们管理文档的习惯，建立文件夹来管理文档和代码是我们必须的，为此，就需要进行添加文件夹的操作，cd到相应的版本仓库的本地文件夹，调用$ git add Sort/ . 这样就在C-Cplus-plus仓库内添加了一个Sort文件夹，当然这并不是最终形式没还需要commit操作才能生效, 也就是保存到本地仓库：$ git commit -m &quot;相关说明&quot;&emsp;&emsp;最后调用push把添加之后的仓库push到github仓库了 $git push origin master ， 到这里就完成了git本地环境的搭建并与github创建了相应的连接。【注意】，当我们往已经有的仓库中添加新的代码时记得，先pull下来更新代码赖，然后在push，如果有冲突就解决冲突，没有的话就直接push。]]></content>
      <categories>
        <category>git使用</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用github/Node.Js/Hexo/git创建个人博客]]></title>
    <url>%2F2017%2F12%2F17%2F%E5%88%A9%E7%94%A8github-Node-Js-Hexo-git%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Git 仓库配置Node.Js 安装Hexo 安装]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>blog环境</tag>
      </tags>
  </entry>
</search>
